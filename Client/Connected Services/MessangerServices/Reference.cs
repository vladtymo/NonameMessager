//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.MessangerServices {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatDTO", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class ChatDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPrivateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxUsersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhotoPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UniqueNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPM {
            get {
                return this.IsPMField;
            }
            set {
                if ((this.IsPMField.Equals(value) != true)) {
                    this.IsPMField = value;
                    this.RaisePropertyChanged("IsPM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPrivate {
            get {
                return this.IsPrivateField;
            }
            set {
                if ((this.IsPrivateField.Equals(value) != true)) {
                    this.IsPrivateField = value;
                    this.RaisePropertyChanged("IsPrivate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxUsers {
            get {
                return this.MaxUsersField;
            }
            set {
                if ((this.MaxUsersField.Equals(value) != true)) {
                    this.MaxUsersField = value;
                    this.RaisePropertyChanged("MaxUsers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhotoPath {
            get {
                return this.PhotoPathField;
            }
            set {
                if ((object.ReferenceEquals(this.PhotoPathField, value) != true)) {
                    this.PhotoPathField = value;
                    this.RaisePropertyChanged("PhotoPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UniqueName {
            get {
                return this.UniqueNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UniqueNameField, value) != true)) {
                    this.UniqueNameField = value;
                    this.RaisePropertyChanged("UniqueName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InfoFile", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class InfoFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageDTO", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class MessageDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.MessangerServices.ChatDTO ChatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChatIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.MessangerServices.ClientDTO ClientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime SendingTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.MessangerServices.ChatDTO Chat {
            get {
                return this.ChatField;
            }
            set {
                if ((object.ReferenceEquals(this.ChatField, value) != true)) {
                    this.ChatField = value;
                    this.RaisePropertyChanged("Chat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChatId {
            get {
                return this.ChatIdField;
            }
            set {
                if ((this.ChatIdField.Equals(value) != true)) {
                    this.ChatIdField = value;
                    this.RaisePropertyChanged("ChatId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.MessangerServices.ClientDTO Client {
            get {
                return this.ClientField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientField, value) != true)) {
                    this.ClientField = value;
                    this.RaisePropertyChanged("Client");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientId {
            get {
                return this.ClientIdField;
            }
            set {
                if ((this.ClientIdField.Equals(value) != true)) {
                    this.ClientIdField = value;
                    this.RaisePropertyChanged("ClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SendingTime {
            get {
                return this.SendingTimeField;
            }
            set {
                if ((this.SendingTimeField.Equals(value) != true)) {
                    this.SendingTimeField = value;
                    this.RaisePropertyChanged("SendingTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientDTO", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class ClientDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.MessangerServices.AccountDTO AccountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccountIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhotoPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UniqueNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.MessangerServices.AccountDTO Account {
            get {
                return this.AccountField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountField, value) != true)) {
                    this.AccountField = value;
                    this.RaisePropertyChanged("Account");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccountId {
            get {
                return this.AccountIdField;
            }
            set {
                if ((this.AccountIdField.Equals(value) != true)) {
                    this.AccountIdField = value;
                    this.RaisePropertyChanged("AccountId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhotoPath {
            get {
                return this.PhotoPathField;
            }
            set {
                if ((object.ReferenceEquals(this.PhotoPathField, value) != true)) {
                    this.PhotoPathField = value;
                    this.RaisePropertyChanged("PhotoPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UniqueName {
            get {
                return this.UniqueNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UniqueNameField, value) != true)) {
                    this.UniqueNameField = value;
                    this.RaisePropertyChanged("UniqueName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccountDTO", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class AccountDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientId {
            get {
                return this.ClientIdField;
            }
            set {
                if ((this.ClientIdField.Equals(value) != true)) {
                    this.ClientIdField = value;
                    this.RaisePropertyChanged("ClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatMemberDTO", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class ChatMemberDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.MessangerServices.ChatDTO ChatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChatIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.MessangerServices.ClientDTO ClientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateLastReadMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAdminField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.MessangerServices.ChatDTO Chat {
            get {
                return this.ChatField;
            }
            set {
                if ((object.ReferenceEquals(this.ChatField, value) != true)) {
                    this.ChatField = value;
                    this.RaisePropertyChanged("Chat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChatId {
            get {
                return this.ChatIdField;
            }
            set {
                if ((this.ChatIdField.Equals(value) != true)) {
                    this.ChatIdField = value;
                    this.RaisePropertyChanged("ChatId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.MessangerServices.ClientDTO Client {
            get {
                return this.ClientField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientField, value) != true)) {
                    this.ClientField = value;
                    this.RaisePropertyChanged("Client");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientId {
            get {
                return this.ClientIdField;
            }
            set {
                if ((this.ClientIdField.Equals(value) != true)) {
                    this.ClientIdField = value;
                    this.RaisePropertyChanged("ClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateLastReadMessage {
            get {
                return this.DateLastReadMessageField;
            }
            set {
                if ((this.DateLastReadMessageField.Equals(value) != true)) {
                    this.DateLastReadMessageField = value;
                    this.RaisePropertyChanged("DateLastReadMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageInfo", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class MessageInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.MessangerServices.InfoFile[] FilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.MessangerServices.InfoFile[] Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessangerServices.IChatService", CallbackContract=typeof(Client.MessangerServices.IChatServiceCallback))]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/CreateNewChat", ReplyAction="http://tempuri.org/IChatService/CreateNewChatResponse")]
        Client.MessangerServices.ChatDTO CreateNewChat(Client.MessangerServices.ChatDTO newChatDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/CreateNewChat", ReplyAction="http://tempuri.org/IChatService/CreateNewChatResponse")]
        System.Threading.Tasks.Task<Client.MessangerServices.ChatDTO> CreateNewChatAsync(Client.MessangerServices.ChatDTO newChatDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SetChatProperties", ReplyAction="http://tempuri.org/IChatService/SetChatPropertiesResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="result")]
        bool SetChatProperties(Client.MessangerServices.ChatDTO chatDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SetChatProperties", ReplyAction="http://tempuri.org/IChatService/SetChatPropertiesResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="result")]
        System.Threading.Tasks.Task<bool> SetChatPropertiesAsync(Client.MessangerServices.ChatDTO chatDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SetChatPhoto", ReplyAction="http://tempuri.org/IChatService/SetChatPhotoResponse")]
        void SetChatPhoto(int chatId, Client.MessangerServices.InfoFile info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SetChatPhoto", ReplyAction="http://tempuri.org/IChatService/SetChatPhotoResponse")]
        System.Threading.Tasks.Task SetChatPhotoAsync(int chatId, Client.MessangerServices.InfoFile info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetChatPhoto", ReplyAction="http://tempuri.org/IChatService/GetChatPhotoResponse")]
        Client.MessangerServices.InfoFile GetChatPhoto(int chatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetChatPhoto", ReplyAction="http://tempuri.org/IChatService/GetChatPhotoResponse")]
        System.Threading.Tasks.Task<Client.MessangerServices.InfoFile> GetChatPhotoAsync(int chatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SearchChats", ReplyAction="http://tempuri.org/IChatService/SearchChatsResponse")]
        Client.MessangerServices.ChatDTO[] SearchChats(string uniqueName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SearchChats", ReplyAction="http://tempuri.org/IChatService/SearchChatsResponse")]
        System.Threading.Tasks.Task<Client.MessangerServices.ChatDTO[]> SearchChatsAsync(string uniqueName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/CreatePMChat", ReplyAction="http://tempuri.org/IChatService/CreatePMChatResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="chatId")]
        int CreatePMChat(int clientId, int companionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/CreatePMChat", ReplyAction="http://tempuri.org/IChatService/CreatePMChatResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="chatId")]
        System.Threading.Tasks.Task<int> CreatePMChatAsync(int clientId, int companionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/DeleteChat", ReplyAction="http://tempuri.org/IChatService/DeleteChatResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="isRemoved")]
        bool DeleteChat(int chatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/DeleteChat", ReplyAction="http://tempuri.org/IChatService/DeleteChatResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="isRemoved")]
        System.Threading.Tasks.Task<bool> DeleteChatAsync(int chatId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/TakeMessage")]
        void TakeMessage(Client.MessangerServices.MessageDTO message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Joined")]
        void Joined(Client.MessangerServices.ChatMemberDTO chatMember, int chatId, Client.MessangerServices.InfoFile photo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Left")]
        void Left(int clientId, int chatId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/TakeChat")]
        void TakeChat(Client.MessangerServices.ChatDTO chat, Client.MessangerServices.InfoFile photo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/DeleteChatForAll")]
        void DeleteChatForAll(int chatId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/RemoveMessageForAll")]
        void RemoveMessageForAll(int chatId, int messageId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/AddChatForContact")]
        void AddChatForContact(Client.MessangerServices.ChatDTO chat, Client.MessangerServices.InfoFile photo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/GetNewClientProperties")]
        void GetNewClientProperties(Client.MessangerServices.ClientDTO client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/GetNewClientPhoto")]
        void GetNewClientPhoto(int clientId, Client.MessangerServices.InfoFile photo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SetNewPMChatProperties")]
        void SetNewPMChatProperties(Client.MessangerServices.ChatDTO chat);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/GetNewChatProperties")]
        void GetNewChatProperties(Client.MessangerServices.ChatDTO chat);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/GetNewChatPhoto")]
        void GetNewChatPhoto(int chatId, Client.MessangerServices.InfoFile photo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : Client.MessangerServices.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<Client.MessangerServices.IChatService>, Client.MessangerServices.IChatService {
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public Client.MessangerServices.ChatDTO CreateNewChat(Client.MessangerServices.ChatDTO newChatDTO) {
            return base.Channel.CreateNewChat(newChatDTO);
        }
        
        public System.Threading.Tasks.Task<Client.MessangerServices.ChatDTO> CreateNewChatAsync(Client.MessangerServices.ChatDTO newChatDTO) {
            return base.Channel.CreateNewChatAsync(newChatDTO);
        }
        
        public bool SetChatProperties(Client.MessangerServices.ChatDTO chatDTO) {
            return base.Channel.SetChatProperties(chatDTO);
        }
        
        public System.Threading.Tasks.Task<bool> SetChatPropertiesAsync(Client.MessangerServices.ChatDTO chatDTO) {
            return base.Channel.SetChatPropertiesAsync(chatDTO);
        }
        
        public void SetChatPhoto(int chatId, Client.MessangerServices.InfoFile info) {
            base.Channel.SetChatPhoto(chatId, info);
        }
        
        public System.Threading.Tasks.Task SetChatPhotoAsync(int chatId, Client.MessangerServices.InfoFile info) {
            return base.Channel.SetChatPhotoAsync(chatId, info);
        }
        
        public Client.MessangerServices.InfoFile GetChatPhoto(int chatId) {
            return base.Channel.GetChatPhoto(chatId);
        }
        
        public System.Threading.Tasks.Task<Client.MessangerServices.InfoFile> GetChatPhotoAsync(int chatId) {
            return base.Channel.GetChatPhotoAsync(chatId);
        }
        
        public Client.MessangerServices.ChatDTO[] SearchChats(string uniqueName) {
            return base.Channel.SearchChats(uniqueName);
        }
        
        public System.Threading.Tasks.Task<Client.MessangerServices.ChatDTO[]> SearchChatsAsync(string uniqueName) {
            return base.Channel.SearchChatsAsync(uniqueName);
        }
        
        public int CreatePMChat(int clientId, int companionId) {
            return base.Channel.CreatePMChat(clientId, companionId);
        }
        
        public System.Threading.Tasks.Task<int> CreatePMChatAsync(int clientId, int companionId) {
            return base.Channel.CreatePMChatAsync(clientId, companionId);
        }
        
        public bool DeleteChat(int chatId) {
            return base.Channel.DeleteChat(chatId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteChatAsync(int chatId) {
            return base.Channel.DeleteChatAsync(chatId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessangerServices.IClientService", CallbackContract=typeof(Client.MessangerServices.IClientServiceCallback))]
    public interface IClientService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/CreateNewClient", ReplyAction="http://tempuri.org/IClientService/CreateNewClientResponse")]
        Client.MessangerServices.ClientDTO CreateNewClient(Client.MessangerServices.ClientDTO client, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/CreateNewClient", ReplyAction="http://tempuri.org/IClientService/CreateNewClientResponse")]
        System.Threading.Tasks.Task<Client.MessangerServices.ClientDTO> CreateNewClientAsync(Client.MessangerServices.ClientDTO client, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetClient", ReplyAction="http://tempuri.org/IClientService/GetClientResponse")]
        Client.MessangerServices.ClientDTO GetClient(Client.MessangerServices.AccountDTO account, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetClient", ReplyAction="http://tempuri.org/IClientService/GetClientResponse")]
        System.Threading.Tasks.Task<Client.MessangerServices.ClientDTO> GetClientAsync(Client.MessangerServices.AccountDTO account, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/SetProperties", ReplyAction="http://tempuri.org/IClientService/SetPropertiesResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="result")]
        bool SetProperties(Client.MessangerServices.ClientDTO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/SetProperties", ReplyAction="http://tempuri.org/IClientService/SetPropertiesResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="result")]
        System.Threading.Tasks.Task<bool> SetPropertiesAsync(Client.MessangerServices.ClientDTO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/SetPhoto", ReplyAction="http://tempuri.org/IClientService/SetPhotoResponse")]
        void SetPhoto(int clientId, Client.MessangerServices.InfoFile info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/SetPhoto", ReplyAction="http://tempuri.org/IClientService/SetPhotoResponse")]
        System.Threading.Tasks.Task SetPhotoAsync(int clientId, Client.MessangerServices.InfoFile info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetPhoto", ReplyAction="http://tempuri.org/IClientService/GetPhotoResponse")]
        Client.MessangerServices.InfoFile GetPhoto(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetPhoto", ReplyAction="http://tempuri.org/IClientService/GetPhotoResponse")]
        System.Threading.Tasks.Task<Client.MessangerServices.InfoFile> GetPhotoAsync(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetPathToPhoto", ReplyAction="http://tempuri.org/IClientService/GetPathToPhotoResponse")]
        void GetPathToPhoto(string pathToPhoto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetPathToPhoto", ReplyAction="http://tempuri.org/IClientService/GetPathToPhotoResponse")]
        System.Threading.Tasks.Task GetPathToPhotoAsync(string pathToPhoto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/Disconnect", ReplyAction="http://tempuri.org/IClientService/DisconnectResponse")]
        void Disconnect();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/Disconnect", ReplyAction="http://tempuri.org/IClientService/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/SearchClients", ReplyAction="http://tempuri.org/IClientService/SearchClientsResponse")]
        Client.MessangerServices.ClientDTO[] SearchClients(string uniqueName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/SearchClients", ReplyAction="http://tempuri.org/IClientService/SearchClientsResponse")]
        System.Threading.Tasks.Task<Client.MessangerServices.ClientDTO[]> SearchClientsAsync(string uniqueName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientService/TakeMessage")]
        void TakeMessage(Client.MessangerServices.MessageDTO message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientService/Joined")]
        void Joined(Client.MessangerServices.ChatMemberDTO chatMember, int chatId, Client.MessangerServices.InfoFile photo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientService/Left")]
        void Left(int clientId, int chatId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientService/TakeChat")]
        void TakeChat(Client.MessangerServices.ChatDTO chat, Client.MessangerServices.InfoFile photo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientService/DeleteChatForAll")]
        void DeleteChatForAll(int chatId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientService/RemoveMessageForAll")]
        void RemoveMessageForAll(int chatId, int messageId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientService/AddChatForContact")]
        void AddChatForContact(Client.MessangerServices.ChatDTO chat, Client.MessangerServices.InfoFile photo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientService/GetNewClientProperties")]
        void GetNewClientProperties(Client.MessangerServices.ClientDTO client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientService/GetNewClientPhoto")]
        void GetNewClientPhoto(int clientId, Client.MessangerServices.InfoFile photo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientService/SetNewPMChatProperties")]
        void SetNewPMChatProperties(Client.MessangerServices.ChatDTO chat);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientService/GetNewChatProperties")]
        void GetNewChatProperties(Client.MessangerServices.ChatDTO chat);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientService/GetNewChatPhoto")]
        void GetNewChatPhoto(int chatId, Client.MessangerServices.InfoFile photo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientServiceChannel : Client.MessangerServices.IClientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientServiceClient : System.ServiceModel.DuplexClientBase<Client.MessangerServices.IClientService>, Client.MessangerServices.IClientService {
        
        public ClientServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ClientServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ClientServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public Client.MessangerServices.ClientDTO CreateNewClient(Client.MessangerServices.ClientDTO client, string password) {
            return base.Channel.CreateNewClient(client, password);
        }
        
        public System.Threading.Tasks.Task<Client.MessangerServices.ClientDTO> CreateNewClientAsync(Client.MessangerServices.ClientDTO client, string password) {
            return base.Channel.CreateNewClientAsync(client, password);
        }
        
        public Client.MessangerServices.ClientDTO GetClient(Client.MessangerServices.AccountDTO account, string password) {
            return base.Channel.GetClient(account, password);
        }
        
        public System.Threading.Tasks.Task<Client.MessangerServices.ClientDTO> GetClientAsync(Client.MessangerServices.AccountDTO account, string password) {
            return base.Channel.GetClientAsync(account, password);
        }
        
        public bool SetProperties(Client.MessangerServices.ClientDTO client) {
            return base.Channel.SetProperties(client);
        }
        
        public System.Threading.Tasks.Task<bool> SetPropertiesAsync(Client.MessangerServices.ClientDTO client) {
            return base.Channel.SetPropertiesAsync(client);
        }
        
        public void SetPhoto(int clientId, Client.MessangerServices.InfoFile info) {
            base.Channel.SetPhoto(clientId, info);
        }
        
        public System.Threading.Tasks.Task SetPhotoAsync(int clientId, Client.MessangerServices.InfoFile info) {
            return base.Channel.SetPhotoAsync(clientId, info);
        }
        
        public Client.MessangerServices.InfoFile GetPhoto(int clientId) {
            return base.Channel.GetPhoto(clientId);
        }
        
        public System.Threading.Tasks.Task<Client.MessangerServices.InfoFile> GetPhotoAsync(int clientId) {
            return base.Channel.GetPhotoAsync(clientId);
        }
        
        public void GetPathToPhoto(string pathToPhoto) {
            base.Channel.GetPathToPhoto(pathToPhoto);
        }
        
        public System.Threading.Tasks.Task GetPathToPhotoAsync(string pathToPhoto) {
            return base.Channel.GetPathToPhotoAsync(pathToPhoto);
        }
        
        public void Disconnect() {
            base.Channel.Disconnect();
        }
        
        public System.Threading.Tasks.Task DisconnectAsync() {
            return base.Channel.DisconnectAsync();
        }
        
        public Client.MessangerServices.ClientDTO[] SearchClients(string uniqueName) {
            return base.Channel.SearchClients(uniqueName);
        }
        
        public System.Threading.Tasks.Task<Client.MessangerServices.ClientDTO[]> SearchClientsAsync(string uniqueName) {
            return base.Channel.SearchClientsAsync(uniqueName);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessangerServices.IContactService", CallbackContract=typeof(Client.MessangerServices.IContactServiceCallback))]
    public interface IContactService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/AddContact", ReplyAction="http://tempuri.org/IContactService/AddContactResponse")]
        Client.MessangerServices.ClientDTO AddContact(int clientID, int contactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/AddContact", ReplyAction="http://tempuri.org/IContactService/AddContactResponse")]
        System.Threading.Tasks.Task<Client.MessangerServices.ClientDTO> AddContactAsync(int clientID, int contactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/DeleteContact", ReplyAction="http://tempuri.org/IContactService/DeleteContactResponse")]
        bool DeleteContact(int clientID, int contactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/DeleteContact", ReplyAction="http://tempuri.org/IContactService/DeleteContactResponse")]
        System.Threading.Tasks.Task<bool> DeleteContactAsync(int clientID, int contactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/TakeContacts", ReplyAction="http://tempuri.org/IContactService/TakeContactsResponse")]
        Client.MessangerServices.ClientDTO[] TakeContacts(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/TakeContacts", ReplyAction="http://tempuri.org/IContactService/TakeContactsResponse")]
        System.Threading.Tasks.Task<Client.MessangerServices.ClientDTO[]> TakeContactsAsync(int clientId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContactServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IContactService/TakeMessage")]
        void TakeMessage(Client.MessangerServices.MessageDTO message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IContactService/Joined")]
        void Joined(Client.MessangerServices.ChatMemberDTO chatMember, int chatId, Client.MessangerServices.InfoFile photo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IContactService/Left")]
        void Left(int clientId, int chatId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IContactService/TakeChat")]
        void TakeChat(Client.MessangerServices.ChatDTO chat, Client.MessangerServices.InfoFile photo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IContactService/DeleteChatForAll")]
        void DeleteChatForAll(int chatId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IContactService/RemoveMessageForAll")]
        void RemoveMessageForAll(int chatId, int messageId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IContactService/AddChatForContact")]
        void AddChatForContact(Client.MessangerServices.ChatDTO chat, Client.MessangerServices.InfoFile photo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IContactService/GetNewClientProperties")]
        void GetNewClientProperties(Client.MessangerServices.ClientDTO client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IContactService/GetNewClientPhoto")]
        void GetNewClientPhoto(int clientId, Client.MessangerServices.InfoFile photo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IContactService/SetNewPMChatProperties")]
        void SetNewPMChatProperties(Client.MessangerServices.ChatDTO chat);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IContactService/GetNewChatProperties")]
        void GetNewChatProperties(Client.MessangerServices.ChatDTO chat);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IContactService/GetNewChatPhoto")]
        void GetNewChatPhoto(int chatId, Client.MessangerServices.InfoFile photo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContactServiceChannel : Client.MessangerServices.IContactService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContactServiceClient : System.ServiceModel.DuplexClientBase<Client.MessangerServices.IContactService>, Client.MessangerServices.IContactService {
        
        public ContactServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ContactServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ContactServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ContactServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ContactServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public Client.MessangerServices.ClientDTO AddContact(int clientID, int contactId) {
            return base.Channel.AddContact(clientID, contactId);
        }
        
        public System.Threading.Tasks.Task<Client.MessangerServices.ClientDTO> AddContactAsync(int clientID, int contactId) {
            return base.Channel.AddContactAsync(clientID, contactId);
        }
        
        public bool DeleteContact(int clientID, int contactId) {
            return base.Channel.DeleteContact(clientID, contactId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteContactAsync(int clientID, int contactId) {
            return base.Channel.DeleteContactAsync(clientID, contactId);
        }
        
        public Client.MessangerServices.ClientDTO[] TakeContacts(int clientId) {
            return base.Channel.TakeContacts(clientId);
        }
        
        public System.Threading.Tasks.Task<Client.MessangerServices.ClientDTO[]> TakeContactsAsync(int clientId) {
            return base.Channel.TakeContactsAsync(clientId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessangerServices.IChatMemberService", CallbackContract=typeof(Client.MessangerServices.IChatMemberServiceCallback))]
    public interface IChatMemberService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatMemberService/JoinToChat", ReplyAction="http://tempuri.org/IChatMemberService/JoinToChatResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="newChat")]
        Client.MessangerServices.ChatDTO JoinToChat(int clientId, string chatUniqueName, bool isAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatMemberService/JoinToChat", ReplyAction="http://tempuri.org/IChatMemberService/JoinToChatResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="newChat")]
        System.Threading.Tasks.Task<Client.MessangerServices.ChatDTO> JoinToChatAsync(int clientId, string chatUniqueName, bool isAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatMemberService/LeaveFromChat", ReplyAction="http://tempuri.org/IChatMemberService/LeaveFromChatResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="result")]
        bool LeaveFromChat(int clientId, int chatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatMemberService/LeaveFromChat", ReplyAction="http://tempuri.org/IChatMemberService/LeaveFromChatResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="result")]
        System.Threading.Tasks.Task<bool> LeaveFromChatAsync(int clientId, int chatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatMemberService/TakeChats", ReplyAction="http://tempuri.org/IChatMemberService/TakeChatsResponse")]
        Client.MessangerServices.ChatDTO[] TakeChats(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatMemberService/TakeChats", ReplyAction="http://tempuri.org/IChatMemberService/TakeChatsResponse")]
        System.Threading.Tasks.Task<Client.MessangerServices.ChatDTO[]> TakeChatsAsync(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatMemberService/TakeClients", ReplyAction="http://tempuri.org/IChatMemberService/TakeClientsResponse")]
        Client.MessangerServices.ChatMemberDTO[] TakeClients(int chatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatMemberService/TakeClients", ReplyAction="http://tempuri.org/IChatMemberService/TakeClientsResponse")]
        System.Threading.Tasks.Task<Client.MessangerServices.ChatMemberDTO[]> TakeClientsAsync(int chatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatMemberService/InviteContact", ReplyAction="http://tempuri.org/IChatMemberService/InviteContactResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="result")]
        bool InviteContact(int chatId, int contactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatMemberService/InviteContact", ReplyAction="http://tempuri.org/IChatMemberService/InviteContactResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="result")]
        System.Threading.Tasks.Task<bool> InviteContactAsync(int chatId, int contactId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatMemberServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMemberService/TakeMessage")]
        void TakeMessage(Client.MessangerServices.MessageDTO message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMemberService/Joined")]
        void Joined(Client.MessangerServices.ChatMemberDTO chatMember, int chatId, Client.MessangerServices.InfoFile photo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMemberService/Left")]
        void Left(int clientId, int chatId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMemberService/TakeChat")]
        void TakeChat(Client.MessangerServices.ChatDTO chat, Client.MessangerServices.InfoFile photo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMemberService/DeleteChatForAll")]
        void DeleteChatForAll(int chatId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMemberService/RemoveMessageForAll")]
        void RemoveMessageForAll(int chatId, int messageId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMemberService/AddChatForContact")]
        void AddChatForContact(Client.MessangerServices.ChatDTO chat, Client.MessangerServices.InfoFile photo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMemberService/GetNewClientProperties")]
        void GetNewClientProperties(Client.MessangerServices.ClientDTO client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMemberService/GetNewClientPhoto")]
        void GetNewClientPhoto(int clientId, Client.MessangerServices.InfoFile photo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMemberService/SetNewPMChatProperties")]
        void SetNewPMChatProperties(Client.MessangerServices.ChatDTO chat);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMemberService/GetNewChatProperties")]
        void GetNewChatProperties(Client.MessangerServices.ChatDTO chat);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatMemberService/GetNewChatPhoto")]
        void GetNewChatPhoto(int chatId, Client.MessangerServices.InfoFile photo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatMemberServiceChannel : Client.MessangerServices.IChatMemberService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatMemberServiceClient : System.ServiceModel.DuplexClientBase<Client.MessangerServices.IChatMemberService>, Client.MessangerServices.IChatMemberService {
        
        public ChatMemberServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatMemberServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatMemberServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatMemberServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatMemberServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public Client.MessangerServices.ChatDTO JoinToChat(int clientId, string chatUniqueName, bool isAdmin) {
            return base.Channel.JoinToChat(clientId, chatUniqueName, isAdmin);
        }
        
        public System.Threading.Tasks.Task<Client.MessangerServices.ChatDTO> JoinToChatAsync(int clientId, string chatUniqueName, bool isAdmin) {
            return base.Channel.JoinToChatAsync(clientId, chatUniqueName, isAdmin);
        }
        
        public bool LeaveFromChat(int clientId, int chatId) {
            return base.Channel.LeaveFromChat(clientId, chatId);
        }
        
        public System.Threading.Tasks.Task<bool> LeaveFromChatAsync(int clientId, int chatId) {
            return base.Channel.LeaveFromChatAsync(clientId, chatId);
        }
        
        public Client.MessangerServices.ChatDTO[] TakeChats(int clientId) {
            return base.Channel.TakeChats(clientId);
        }
        
        public System.Threading.Tasks.Task<Client.MessangerServices.ChatDTO[]> TakeChatsAsync(int clientId) {
            return base.Channel.TakeChatsAsync(clientId);
        }
        
        public Client.MessangerServices.ChatMemberDTO[] TakeClients(int chatId) {
            return base.Channel.TakeClients(chatId);
        }
        
        public System.Threading.Tasks.Task<Client.MessangerServices.ChatMemberDTO[]> TakeClientsAsync(int chatId) {
            return base.Channel.TakeClientsAsync(chatId);
        }
        
        public bool InviteContact(int chatId, int contactId) {
            return base.Channel.InviteContact(chatId, contactId);
        }
        
        public System.Threading.Tasks.Task<bool> InviteContactAsync(int chatId, int contactId) {
            return base.Channel.InviteContactAsync(chatId, contactId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessangerServices.IMessageService", CallbackContract=typeof(Client.MessangerServices.IMessageServiceCallback))]
    public interface IMessageService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/SendMessage")]
        void SendMessage(int clientId, int chatId, Client.MessangerServices.MessageInfo message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(int clientId, int chatId, Client.MessangerServices.MessageInfo message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/TakeMessages", ReplyAction="http://tempuri.org/IMessageService/TakeMessagesResponse")]
        Client.MessangerServices.MessageDTO[] TakeMessages(int chatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/TakeMessages", ReplyAction="http://tempuri.org/IMessageService/TakeMessagesResponse")]
        System.Threading.Tasks.Task<Client.MessangerServices.MessageDTO[]> TakeMessagesAsync(int chatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/DeleteMessageForAll", ReplyAction="http://tempuri.org/IMessageService/DeleteMessageForAllResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="result")]
        bool DeleteMessageForAll(int messageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/DeleteMessageForAll", ReplyAction="http://tempuri.org/IMessageService/DeleteMessageForAllResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="result")]
        System.Threading.Tasks.Task<bool> DeleteMessageForAllAsync(int messageId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessageServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/TakeMessage")]
        void TakeMessage(Client.MessangerServices.MessageDTO message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/Joined")]
        void Joined(Client.MessangerServices.ChatMemberDTO chatMember, int chatId, Client.MessangerServices.InfoFile photo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/Left")]
        void Left(int clientId, int chatId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/TakeChat")]
        void TakeChat(Client.MessangerServices.ChatDTO chat, Client.MessangerServices.InfoFile photo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/DeleteChatForAll")]
        void DeleteChatForAll(int chatId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/RemoveMessageForAll")]
        void RemoveMessageForAll(int chatId, int messageId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/AddChatForContact")]
        void AddChatForContact(Client.MessangerServices.ChatDTO chat, Client.MessangerServices.InfoFile photo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/GetNewClientProperties")]
        void GetNewClientProperties(Client.MessangerServices.ClientDTO client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/GetNewClientPhoto")]
        void GetNewClientPhoto(int clientId, Client.MessangerServices.InfoFile photo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/SetNewPMChatProperties")]
        void SetNewPMChatProperties(Client.MessangerServices.ChatDTO chat);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/GetNewChatProperties")]
        void GetNewChatProperties(Client.MessangerServices.ChatDTO chat);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/GetNewChatPhoto")]
        void GetNewChatPhoto(int chatId, Client.MessangerServices.InfoFile photo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessageServiceChannel : Client.MessangerServices.IMessageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MessageServiceClient : System.ServiceModel.DuplexClientBase<Client.MessangerServices.IMessageService>, Client.MessangerServices.IMessageService {
        
        public MessageServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendMessage(int clientId, int chatId, Client.MessangerServices.MessageInfo message) {
            base.Channel.SendMessage(clientId, chatId, message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(int clientId, int chatId, Client.MessangerServices.MessageInfo message) {
            return base.Channel.SendMessageAsync(clientId, chatId, message);
        }
        
        public Client.MessangerServices.MessageDTO[] TakeMessages(int chatId) {
            return base.Channel.TakeMessages(chatId);
        }
        
        public System.Threading.Tasks.Task<Client.MessangerServices.MessageDTO[]> TakeMessagesAsync(int chatId) {
            return base.Channel.TakeMessagesAsync(chatId);
        }
        
        public bool DeleteMessageForAll(int messageId) {
            return base.Channel.DeleteMessageForAll(messageId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMessageForAllAsync(int messageId) {
            return base.Channel.DeleteMessageForAllAsync(messageId);
        }
    }
}
